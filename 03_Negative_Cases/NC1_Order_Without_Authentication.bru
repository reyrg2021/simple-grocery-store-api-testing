meta {
  name: NC1_Order_Without_Authentication
  type: http
  seq: 6
}

post {
  url: {{baseUrl}}/orders
  body: json
  auth: inherit
}

body:json {
  {
    "cartId": "{{nc1_cartId}}",
    "customerName": "Test Customer Without Auth"
  }
  
}

script:pre-request {
  console.log("Negative Case 1: Testing order creation without authentication...");
  
  const axios = require('axios');
  
  // Crear cart con items para intentar hacer orden
  const setupCartWithItems = async () => {
    // Crear cart
    await axios({
      method: 'post',
      url: 'https://simple-grocery-store-api.click/carts',
    })
    .then(res => {
      bru.setVar('nc1_cartId', res.data.cartId);
      console.log("Cart created for negative test:", res.data.cartId);
    });
    
    // Agregar item al cart
    const cartId = bru.getVar('nc1_cartId');
    await axios({
      method: 'post',
      url: `https://simple-grocery-store-api.click/carts/${cartId}/items`,
      data: {
        productId: 4643,
        quantity: 2
      }
    })
    .then(res => {
      console.log("Item added to cart for negative test");
    });
  };
  
  await setupCartWithItems();
  
  console.log("Attempting to create order WITHOUT authentication token");
  console.log("Expected: Should get 401 Unauthorized error");
}

script:post-response {
  const status = res.getStatus();
  const body = res.getBody();
  
  console.log("Negative Case 1 - No auth test status:", status);
  
  if (status === 401) {
    console.log("Expected behavior: Unauthorized access properly rejected");
    console.log("Error message:", body.error || body.message);
  } else if (status === 403) {
    console.log("Expected behavior: Forbidden access properly rejected");
    console.log("Error message:", body.error || body.message);
  } else {
    console.log("Unexpected: System should require authentication");
    console.log("Status:", status);
    console.log("Response:", body);
  }
}

tests {
  test("Should reject order without authentication", function() {
    expect([401, 403]).to.include(res.getStatus());
  });
  
  test("Should provide authentication error message", function() {
    expect(res.getBody()).to.have.property('error');
  });
  
  test("Should not create order", function() {
    expect(res.getBody()).to.not.have.property('orderId');
  });
  
  test("Error message should mention authentication", function() {
    const errorMsg = res.getBody().error || res.getBody().message || '';
    const authRelated = errorMsg.toLowerCase().includes('auth') || 
                       errorMsg.toLowerCase().includes('unauthorized') ||
                       errorMsg.toLowerCase().includes('token');
    expect(authRelated).to.be.true;
  });
}

settings {
  encodeUrl: true
}
